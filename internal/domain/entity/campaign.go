// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0

package entity

import (
	"database/sql/driver"
	"fmt"
	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

type CampaignGender string

const (
	CampaignGenderMALE   CampaignGender = "MALE"
	CampaignGenderFEMALE CampaignGender = "FEMALE"
	CampaignGenderALL    CampaignGender = "ALL"
)

func (e *CampaignGender) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = CampaignGender(s)
	case string:
		*e = CampaignGender(s)
	default:
		return fmt.Errorf("unsupported scan type for CampaignGender: %T", src)
	}
	return nil
}

type NullCampaignGender struct {
	CampaignGender CampaignGender
	Valid          bool // Valid is true if CampaignGender is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullCampaignGender) Scan(value interface{}) error {
	if value == nil {
		ns.CampaignGender, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.CampaignGender.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullCampaignGender) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.CampaignGender), nil
}

type Campaign struct {
	ID                uuid.UUID
	AdvertiserID      uuid.UUID
	ImpressionLimit   int32
	ClicksLimit       int32
	CostPerImpression float64
	CostPerClick      float64
	AdTitle           string
	AdText            string
	StartDate         int32
	EndDate           int32
	Gender            CampaignGender
	AgeFrom           pgtype.Int4
	AgeTo             pgtype.Int4
	Location          pgtype.Text
	Approved          bool
}

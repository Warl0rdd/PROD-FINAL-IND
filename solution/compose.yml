services:
  database:
    container_name: database
    expose:
      - "5432:5432"
    ports:
        - "5432:5432"
    env_file:
      - .env
    image: postgres:16.6-alpine3.19
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}" ]
      interval: 5s
      timeout: 5s
      retries: 5
      start_period: 5s
    volumes:
      - database:/var/lib/postgresql/data
    restart: always

  redis:
    container_name: redis
    image: redis:6.2-alpine
    expose:
      - "6379"
    ports:
      - "6379:6379"
    volumes:
      - redis:/data
    command: >
      sh -c '
        mkdir -p /usr/local/etc/redis &&
        echo "bind 0.0.0.0" > /usr/local/etc/redis/redis.conf &&
        echo "appendonly yes" >> /usr/local/etc/redis/redis.conf &&
        echo "appendfsync everysec" >> /usr/local/etc/redis/redis.conf &&
        echo "user default on nopass ~* +@all" > /usr/local/etc/redis/users.acl &&
        redis-server /usr/local/etc/redis/redis.conf --aclfile /usr/local/etc/redis/users.acl
      '
    healthcheck:
      test: [ "CMD", "redis-cli", "ping" ]
      interval: 30s
      timeout: 10s
      retries: 5
    restart: unless-stopped
    tty: true
    stdin_open: true

  grafana:
    container_name: grafana
    image: grafana/grafana:main
    ports:
      - "3001:3000"
    volumes:
      - grafana:/var/lib/grafana

  prometheus:
    container_name: prometheus
    image: prom/prometheus:main
    ports:
      - "9090:9090"
    volumes:
      - prometheus:/prometheus
      - ./oss-configs/prometheus.yml:/etc/prometheus/prometheus.yml
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--enable-feature=native-histograms'

  loki:
    container_name: loki
    image: grafana/loki:3.4.1
    restart: always
    ports:
      - "3100:3100"
    volumes:
      - ./oss-configs/loki-config.yaml:/etc/loki/local-config.yaml
    command: -config.file=/etc/loki/local-config.yaml
    depends_on:
      - minio

  tempo:
    container_name: tempo
    image: grafana/tempo:latest
    restart: always
    ports:
      - "3200:3200"
    volumes:
      - ./oss-configs/tempo-config.yaml:/etc/tempo/tempo-config.yaml
      - tempo:/var/tempo
    command: -config.file=/etc/tempo/tempo-config.yaml
    depends_on:
      - minio
      - prometheus

  mimir:
    container_name: mimir
    image: grafana/mimir:latest
    restart: always
    ports:
      - "9009:9009"
    volumes:
      - ./oss-configs/mimir-config.yaml:/etc/mimir/mimir.yaml
    command: --config.file=/etc/mimir/mimir.yaml
    depends_on:
      - minio

  otel-collector:
    container_name: otel-collector
    image: otel/opentelemetry-collector-contrib:latest
    volumes:
      - ./oss-configs/otel-collector-config.yaml:/etc/otelcol-contrib/config.yaml
    ports:
      - "4317:4317"
      - "4318:4318"

  minio:
    container_name: minio
    image: minio/minio:latest
    ports:
      - "9000:9000"
      - "9001:9001"
    environment:
      MINIO_ROOT_USER: minioadmin
      MINIO_ROOT_PASSWORD: minioadmin
    volumes:
      - minio:/data
    command: server /data --console-address ":9001"

  init-buckets:
    image: minio/mc
    depends_on:
      - minio
    entrypoint: >
      sh -c "until mc alias set myminio http://minio:9000 minioadmin minioadmin; do sleep 1; done &&
             mc mb myminio/loki &&
             mc mb myminio/tempo &&
             mc mb myminio/mimir &&
             mc mb myminio/images &&
             mc policy set public myminio/loki"

  backend:
    build: .
    container_name: backend
    restart: unless-stopped
    env_file:
      - .env
    ports:
      - "3000:3000"
    depends_on:
      database:
        condition: service_healthy

  migrations:
    build:
      context: .
      dockerfile: dockerfiles/goose.Dockerfile
    container_name: migrations
    depends_on:
      database:
        condition: service_healthy
    env_file:
      - goose.env

volumes:
  database:
  redis:
  prometheus:
  minio:
  tempo:
  grafana:
